name: API - Build & Deploy Staging

env:
  AZURE_WEBAPP_NAME: ga-cd-lab-api-staging
  AZURE_WEBAPP_PACKAGE_PATH: "api"
  DOTNET_VERSION: "9"
  # for testing purposes only -> will be stored & retrieved from az key vault in the future
  DB_CONNECTION_STRING: "Server=tcp:ga-cd-lab-sql-staging.database.windows.net,1433;Initial Catalog=ga-cd-lab-db-staging;Persist Security Info=False;User ID=sqladmin;Password=P@ssw0rd1234!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"

on:
  push:
    branches: ["release"]
    paths:
      - "api/**"
      - ".infrastructure/**"
      - "dbup/**"
      - ".github/workflows/cd-api-stage.yml"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      contains(github.event.head_commit.modified, '.infrastructure/') || 
      contains(github.event.head_commit.added, '.infrastructure/') || 
      contains(github.event.head_commit.removed, '.infrastructure/')
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        run: terraform init
        working-directory: ./.infrastructure
      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=environments/staging.tfvars
        working-directory: ./.infrastructure
        env:
          TF_VAR_azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

  database-migration:
    runs-on: ubuntu-latest
    needs: terraform
    if: |
      github.event_name == 'workflow_dispatch' || 
      contains(github.event.head_commit.modified, 'dbup/') || 
      contains(github.event.head_commit.added, 'dbup/') || 
      contains(github.event.head_commit.removed, 'dbup/')
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Build database migration project
        run: dotnet build dbup --configuration Release
      - name: Generate migration script
        run: dotnet run --project dbup/dbup.csproj -- --scriptsonly --output=./migration-script.sql --environment=staging
        env:
          DB_CONNECTION_STRING: ${{ env.DB_CONNECTION_STRING }}
      - name: Upload migration script artifact
        uses: actions/upload-artifact@v4
        with:
          name: staging-migration-script
          path: ./migration-script.sql
      - name: Run database migrations
        id: run_migrations
        run: |
          dotnet run --project dbup/dbup.csproj -- --environment=staging
          echo "MIGRATION_SUCCESS=true" >> $GITHUB_ENV
        env:
          DB_CONNECTION_STRING: ${{ env.DB_CONNECTION_STRING }}
        continue-on-error: true
      - name: Check migration result
        if: steps.run_migrations.outcome == 'failure'
        run: |
          echo "::error::Database migration failed. Check logs for details."
          exit 1

  build:
    runs-on: ubuntu-latest
    needs: [terraform, database-migration]
    if: |
      (needs.terraform.result == 'success' || needs.terraform.result == 'skipped') && 
      (needs.database-migration.result == 'success' || needs.database-migration.result == 'skipped') &&
      (github.event_name == 'workflow_dispatch' || 
       contains(github.event.head_commit.modified, 'api/') || 
       contains(github.event.head_commit.added, 'api/') || 
       contains(github.event.head_commit.removed, 'api/'))
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Build with dotnet
        run: dotnet build api --configuration Release
      - name: dotnet publish
        run: dotnet publish api -c Release -r linux-x64 -o ${{env.DOTNET_ROOT}}/api
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/api

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Staging"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_STAGING_API_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
