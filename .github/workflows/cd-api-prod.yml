name: API - Build & Deploy Production

env:
  AZURE_WEBAPP_NAME: ga-cd-lab-api-prod
  AZURE_WEBAPP_PACKAGE_PATH: "api"
  DOTNET_VERSION: "9"
  ENVIRONMENT: "prod"
  # for testing purposes only -> will be stored & retrieved from az key vault in the future
  DB_CONNECTION_STRING: "Server=tcp:ga-cd-lab-sql-prod.database.windows.net,1433;Initial Catalog=ga-cd-lab-db-prod;Persist Security Info=False;User ID=sqladmin;Password=P@ssw0rd1234!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"

on:
  workflow_dispatch:
    # manual trigger only

permissions:
  contents: write # allow committing state file (testing purposes)

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      infrastructure_changed: ${{ steps.filter.outputs.infrastructure }}
      database_changed: ${{ steps.filter.outputs.database }}
      api_changed: ${{ steps.filter.outputs.api }}
    steps:
      - uses: actions/checkout@v4
      - name: Check for file changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            infrastructure:
              - '.infrastructure/**'
            database:
              - 'dbup/**'
            api:
              - 'api/**'

  terraform:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.infrastructure_changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Extract Azure credentials
        id: extract-credentials
        run: |
          echo "ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" >> $GITHUB_ENV

      - name: Terraform Init with Prod Backend
        run: |
          # Initialize with specific state file for prod
          terraform init -force-copy -backend-config="path=prod.terraform.tfstate"
        working-directory: ./.infrastructure

      - name: Select or Create Prod Workspace
        run: |
          terraform workspace select prod || terraform workspace new prod
        working-directory: ./.infrastructure

      - name: Terraform Import Resource Group (if needed)
        continue-on-error: true
        run: |
          terraform import azurerm_resource_group.rg /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/ga-cd-lab-prod
        working-directory: ./.infrastructure

      # plan step for review
      - name: Terraform Plan
        run: |
          terraform plan -var-file=environments/prod.tfvars -var="environment=prod" -out=tfplan
        working-directory: ./.infrastructure

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve tfplan
        working-directory: ./.infrastructure

      - name: Commit updated state file
        if: success()
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          find .infrastructure -name "*.tfstate*" -exec git add {} \;
          find .infrastructure -name "workspace*" -exec git add {} \;
          git commit -m "Update Prod Terraform state [skip ci]" || echo "No changes to commit"
          git push

  database-migration:
    runs-on: ubuntu-latest
    needs: [check-changes, terraform]
    if: (needs.check-changes.outputs.database_changed == 'true' || github.event_name == 'workflow_dispatch') && (needs.terraform.result == 'success' || needs.terraform.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Build database migration project
        run: dotnet build dbup --configuration Release

      # migration script review
      - name: Generate migration script
        run: dotnet run --project dbup/dbup.csproj -- --scriptsonly --output=./migration-script.sql --environment=prod
        env:
          DB_CONNECTION_STRING: ${{ env.DB_CONNECTION_STRING }}

      - name: Upload migration script artifact
        uses: actions/upload-artifact@v4
        with:
          name: prod-migration-script
          path: ./migration-script.sql

      - name: Run database migrations
        id: run_migrations
        run: |
          dotnet run --project dbup/dbup.csproj -- --environment=prod
          echo "MIGRATION_SUCCESS=true" >> $GITHUB_ENV
        env:
          DB_CONNECTION_STRING: ${{ env.DB_CONNECTION_STRING }}
        continue-on-error: true

      - name: Check migration result
        if: steps.run_migrations.outcome == 'failure'
        run: |
          echo "::error::Database migration failed in PRODUCTION. Check logs for details."
          exit 1

  build:
    runs-on: ubuntu-latest
    needs: [check-changes, terraform, database-migration]
    if: (needs.check-changes.outputs.api_changed == 'true' || github.event_name == 'workflow_dispatch') && (needs.terraform.result == 'success' || needs.terraform.result == 'skipped') && (needs.database-migration.result == 'success' || needs.database-migration.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Build with dotnet
        run: dotnet build api --configuration Release
      - name: dotnet publish
        run: dotnet publish api -c Release -r linux-x64 -o ${{env.DOTNET_ROOT}}/api
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/api

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_PROD_API_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
